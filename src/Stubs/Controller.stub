<?php

namespace App\Http\Controllers;

use App\Http\Requests\GenericRequest;
use App\Http\Requests\{{modelName}}Request;
use App\Http\Resources\{{modelName}}Resource;
use App\Services\{{modelName}}Service;
use App\Utils\ResponseUtil;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Routing\Controller;

class {{modelName}}Controller extends Controller
{

    public function __construct(
        private readonly {{modelName}}Service ${{modelNameCamelCase}}Service
    )
    {
    }

    /**
     * Create {{modelNameSpaceCase}}.
     *
     * @param {{modelName}}Request $request
     *
     * @return JsonResponse|JsonResource
     */
    public function create({{modelName}}Request $request): JsonResponse|JsonResource
    {
        $serviceResponse = $this->{{modelNameCamelCase}}Service->create($request->toData());

        if ($serviceResponse->failed()) {
            return ResponseUtil::error($serviceResponse->message);
        }

        return ResponseUtil::resource({{modelName}}Resource::class, $serviceResponse->data);
    }

    /**
     * Get paginated {{modelNameSpaceCase}}s.
     *
     * @param GenericRequest $request
     *
     * @return JsonResponse|JsonResource
     */
    public function getPaginated(GenericRequest $request): JsonResponse|JsonResource
    {
        ${{modelNameCamelCase}}FilterData = {{modelName}}Request::createFrom($request)->toFilterData();
        $serviceResponse = $this->{{modelNameCamelCase}}Service->getPaginated(${{modelNameCamelCase}}FilterData);

        if ($serviceResponse->failed()) {
            return ResponseUtil::error($serviceResponse->message);
        }

        return ResponseUtil::resource({{modelName}}Resource::class, $serviceResponse->data);
    }

    /**
     * Get {{modelNameSpaceCase}} by id.
     *
     * @param GenericRequest $request
     * @param int ${{modelNameId}}
     *
     * @return JsonResponse|JsonResource
     */
    public function getById(GenericRequest $request, int ${{modelNameId}}): JsonResponse|JsonResource
    {
        $relations = $request->getRelations();
        $serviceResponse = $this->{{modelNameCamelCase}}Service->getById(${{modelNameId}}, $relations);

        if ($serviceResponse->failed()) {
            return ResponseUtil::error($serviceResponse->message);
        }

        return ResponseUtil::resource({{modelName}}Resource::class, $serviceResponse->data);
    }

    /**
     * Update {{modelNameSpaceCase}}.
     *
     * @param {{modelName}}Request $request
     * @param int ${{modelNameId}}
     *
     * @return JsonResponse|JsonResource
     */
    public function update({{modelName}}Request $request, int ${{modelNameId}}): JsonResponse|JsonResource
    {
        $serviceResponse = $this->{{modelNameCamelCase}}Service->update($request->toData());

        if ($serviceResponse->failed()) {
            return ResponseUtil::error($serviceResponse->message);
        }

        return ResponseUtil::resource({{modelName}}Resource::class, $serviceResponse->data);
    }

    /**
     * Delete {{modelNameSpaceCase}}.
     *
     * @param GenericRequest $request
     * @param int ${{modelNameId}}
     *
     * @return JsonResponse
     */
    public function delete(GenericRequest $request, int ${{modelNameId}}): JsonResponse
    {
        $serviceResponse = $this->{{modelNameCamelCase}}Service->delete(${{modelNameId}});

        if ($serviceResponse->failed()) {
            return ResponseUtil::error($serviceResponse->message);
        }

        return ResponseUtil::success($serviceResponse->message);
    }

}
