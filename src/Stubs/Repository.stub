<?php

namespace App\Repositories;

use App\Data\{{modelName}}Data;
use App\Data\{{modelName}}FilterData;
use App\Models\{{modelName}};
use Exception;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Log;

class {{modelName}}Repository
{

    /**
     * Save {{modelNameSpaceCase}}.
     *
     * @param {{modelName}}Data ${{modelNameCamelCase}}Data
     * @param {{modelName}}|null ${{modelNameCamelCase}}
     *
     * @return {{modelName}}|null
     */
    public function save({{modelName}}Data ${{modelNameCamelCase}}Data, ?{{modelName}} ${{modelNameCamelCase}} = null): ?{{modelName}}
    {
        ${{modelNameCamelCase}} ??= new {{modelName}}();
        ${{modelNameCamelCase}}->save();

        return $this->findById(${{modelNameCamelCase}}->id, ${{modelNameCamelCase}}Data->meta->relations);
    }

    /**
     * Find {{modelNameSpaceCase}} by id.
     *
     * @param int $id
     * @param array $relations
     * @param array $columns
     *
     * @return {{modelName}}|null
     */
    public function findById(int $id, array $relations = [], array $columns = ['*']): ?{{modelName}}
    {
        return {{modelName}}::with($relations)->where('id', $id)->first($columns);
    }

    /**
     * Checks if the {{modelNameSpaceCase}} exists.
     *
     * @param int $id
     *
     * @return bool
     */
    public function exists(int $id): bool
    {
        return {{modelName}}::where('id', $id)->exists();
    }

    /**
     * Get paginated {{modelNameSpaceCase}}s.
     *
     * @param {{modelName}}FilterData ${{modelNameCamelCase}}FilterData
     *
     * @return LengthAwarePaginator
     */
    public function getPaginated({{modelName}}FilterData ${{modelNameCamelCase}}FilterData): LengthAwarePaginator
    {
        ${{modelNameCamelCase}}Builder = {{modelName}}::query();

        if (!empty(${{modelNameCamelCase}}FilterData->meta->relations)) {
            ${{modelNameCamelCase}}Builder->with(${{modelNameCamelCase}}FilterData->meta->relations);
        }

        if (!empty(${{modelNameCamelCase}}FilterData->meta->columns)) {
            ${{modelNameCamelCase}}Builder->select(${{modelNameCamelCase}}FilterData->meta->columns);
        }

        if (!empty(${{modelNameCamelCase}}FilterData->id)) {
            ${{modelNameCamelCase}}Builder->where('id', ${{modelNameCamelCase}}FilterData->id);
        }

        if (!empty(${{modelNameCamelCase}}FilterData->meta->sortField)) {
            ${{modelNameCamelCase}}Builder->orderBy(${{modelNameCamelCase}}FilterData->meta->sortField, ${{modelNameCamelCase}}FilterData->meta->sortDirection ?? AppConstant::DEFAULT_SORT_DIRECTION);
        }

        return ${{modelNameCamelCase}}Builder->paginate(${{modelNameCamelCase}}FilterData->meta->perPage);
    }

    /**
     * Delete {{modelNameSpaceCase}}.
     *
     * @param int $id
     *
     * @return bool
     */
    public function delete(int $id): bool
    {
        ${{modelNameCamelCase}} = $this->findById($id);

        if (empty(${{modelNameCamelCase}})) {
            return false;
        }

        try {
            return (bool) ${{modelNameCamelCase}}->delete();
        } catch (Exception $e) {
            Log::error("Delete {{modelNameUpperWordSpaceCase}} Exception: {$e->getMessage()}");
            return false;
        }
    }

}
